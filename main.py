# bot.py
import logging
import re
import uuid

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# ========== –ù–ê–°–¢–†–û–ô–ö–ò - –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò ==========
API_TOKEN = "7706883731:AAFhaYepMiGqBGv9ukG7OabIafyZ7WNPC0g"    # —Ç–æ–∫–µ–Ω –æ—Ç BotFather
CHANNEL_ID = -1002328964343          # id –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (—Ü–µ–ª–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
MOD_CHAT_ID = -1002726262070        # id –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
ADMINS = [6383171904]      # —Å–ø–∏—Å–æ–∫ id —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∞–¥–º–∏–Ω–æ–≤ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
# ==============================================

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –í—Å—Ç–∞–≤—å –≤ —Å–≤–æ–π –±–æ—Ç (aiogram v2)
@dp.message_handler(commands=["id"])
async def cmd_id(message: types.Message):
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID —á–∞—Ç–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    await message.reply(f"chat_id: {message.chat.id}\nuser_id: {message.from_user.id}")

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: id -> dict
pending_posts = {}

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SellForm(StatesGroup):
    photos = State()
    price = State()
    condition = State()
    description = State()
    size = State()
    contact = State()
    city = State()

# /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç WM.\n"
        "–•–æ—á–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb,
    )

# /info
@dp.message_handler(commands=["info"])
async def cmd_info(message: types.Message):
    text = (
        "üìå –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã):\n\n"
        "‚Ä¢ –§–æ—Ç–æ ‚Äî –æ—Ç 1 –¥–æ 5 —à—Ç. (—á—ë—Ç–∫–∏–µ)\n"
        "‚Ä¢ –¶–µ–Ω–∞ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 990)\n"
        "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–æ–≤–æ–µ / –±/—É\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: "
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: `–§—É—Ç–±–æ–ª–∫–∞ Represent —Ä–∞–∑–º–µ—Ä 46`\n"
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@username` –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ t.me/username\n"
        "‚Ä¢ –ì–æ—Ä–æ–¥ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\n\n"
        "üî∏ –ú—ã –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—ã/–º–∞–≥–∞–∑–∏–Ω—ã.\n"
        "üö® –†–∞–∑–º–µ—â–µ–Ω–∏–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    )
    await message.answer(text, parse_mode="Markdown")

# –ù–∞—á–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
@dp.message_handler(lambda m: m.text == "üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
@dp.message_handler(commands=["sell"])
async def cmd_sell(message: types.Message):
    await SellForm.photos.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 1 –¥–æ 5). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ `–≥–æ—Ç–æ–≤–æ`.")

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ (1..5)
@dp.message_handler(content_types=["photo"], state=SellForm.photos)
async def process_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    if len(photos) > 5:
        await message.answer("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ ‚ùó")
        return
    await state.update_data(photos=photos)
    await message.answer(f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã ({len(photos)}/5). –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ `–≥–æ—Ç–æ–≤–æ`.")

@dp.message_handler(lambda m: m.text and m.text.lower().strip() == "–≥–æ—Ç–æ–≤–æ", state=SellForm.photos)
async def finish_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("photos"):
        await message.answer("–¢—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel.")
        return
    await SellForm.next()
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É.")

# –¶–µ–Ω–∞
@dp.message_handler(state=SellForm.price)
async def process_price(message: types.Message, state: FSMContext):
    price = message.text.strip()
    # –ù–µ–±–æ–ª—å—à–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–º–µ–Ω–∏—Ç—å –º–Ω. –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    price = re.sub(r"\s+", " ", price)
    await state.update_data(price=price)
    await SellForm.next()
    await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤–æ–µ / –±/—É).")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(state=SellForm.condition)
async def process_condition(message: types.Message, state: FSMContext):
    cond = message.text.strip().lower()
    await state.update_data(condition=cond)
    await SellForm.next()
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: –§—É—Ç–±–æ–ª–∫–∞ —Ä–∞–∑–º–µ—Ä: x).")

# –û–ø–∏—Å–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —Ç–∏–ø –∏ –º–æ–¥–µ–ª—å)
@dp.message_handler(state=SellForm.description)
async def process_description(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    await state.update_data(description=desc)
    await SellForm.next()
    await message.answer("–†–∞–∑–º–µ—Ä")

# –†–∞–∑–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@dp.message_handler(state=SellForm.size)
async def process_size(message: types.Message, state: FSMContext):
    size = message.text.strip()
    await state.update_data(size=size)
    await SellForm.next()
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ @username –∏–ª–∏ t.me/username).")

# –ö–æ–Ω—Ç–∞–∫—Ç ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ @username
def normalize_contact(raw: str) -> str:
    raw = raw.strip()
    if not raw:
        return ""
    # –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me/...
    m = re.search(r"(?:t\.me/|telegram\.me/)(@?[\w\d_]+)", raw)
    if m:
        username = m.group(1)
        if not username.startswith("@"):
            username = "@" + username
        return username
    # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
    if re.fullmatch(r"[\w\d_]+", raw):
        return "@" + raw
    # –µ—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @username
    if raw.startswith("@") and re.fullmatch(r"@[\w\d_]+", raw):
        return raw
    # –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å raw (–∫–∞–∫ –µ—Å—Ç—å) ‚Äî –Ω–æ –ª—É—á—à–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    return raw

@dp.message_handler(state=SellForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact_raw = message.text.strip()
    contact = normalize_contact(contact_raw)
    if not contact or not contact.startswith("@"):
        await message.answer(
            "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@username` –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ t.me/username.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        )
        return
    await state.update_data(contact=contact)
    await SellForm.next()
    await message.answer("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç').")

# –ì–æ—Ä–æ–¥ + —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é
@dp.message_handler(state=SellForm.city)
async def process_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–ø–∏—Å–∞–Ω–∏—è: –µ—Å–ª–∏ size —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º
    desc_line = data["description"]
    if data.get("size") and data["size"].lower() != "–Ω–µ—Ç":
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ä–∞–∑–º–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –Ω–µ —É–∫–∞–∑–∞–ª –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        if "—Ä–∞–∑–º–µ—Ä" not in desc_line.lower():
            desc_line = f"{desc_line} —Ä–∞–∑–º–µ—Ä {data['size']}"

    caption = (
        f"–¶–µ–Ω–∞:{data['price']}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ:{data['condition']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:{desc_line}\n"
        f"–ö—É–ø–∏—Ç—å:{data['contact']}"
    )
    if city and city.lower() != "–Ω–µ—Ç":
        caption += f"\n–ì–æ—Ä–æ–¥:{city}"

    # –°–æ–±–µ—Ä—ë–º media group
    media = []
    for i, file_id in enumerate(data["photos"]):
        if i == 0:
            media.append(types.InputMediaPhoto(file_id, caption=caption))
        else:
            media.append(types.InputMediaPhoto(file_id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Å—Ç (uuid -> –¥–∞–Ω–Ω—ã–µ)
    post_id = str(uuid.uuid4())
    pending_posts[post_id] = {
        "user_id": message.from_user.id,
        "photos": data["photos"],
        "caption": caption,
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    sent = await bot.send_media_group(MOD_CHAT_ID, media)
    # sent ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π; –±–µ—Ä–µ–º id –ø–µ—Ä–≤–æ–≥–æ
    moderator_msg_id = sent[0].message_id

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (callback —Å–æ–¥–µ—Ä–∂–∏—Ç post_id)
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{post_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{post_id}")
    )

    await bot.send_message(MOD_CHAT_ID, f"‚ÑπÔ∏è –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (id: {post_id})", reply_markup=kb)

    await message.answer("‚úÖ –¢–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.callback_query_handler(lambda c: c.data and (c.data.startswith("approve:") or c.data.startswith("reject:")))
async def process_moderation(callback: types.CallbackQuery):
    data = callback.data
    admin_id = callback.from_user.id

    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –º–æ–¥–µ—Ä–∞—Ç—å
    if admin_id not in ADMINS:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    action, post_id = data.split(":", 1)
    post = pending_posts.get(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return

    # –û–¥–æ–±—Ä–µ–Ω–∏–µ: –ø—É–±–ª–∏–∫—É–µ–º –≤ CHANNEL_ID
    if action == "approve":
        # –ø—É–±–ª–∏–∫—É–µ–º media_group –≤ –∫–∞–Ω–∞–ª
        media = []
        for i, file_id in enumerate(post["photos"]):
            if i == 0:
                media.append(types.InputMediaPhoto(file_id, caption=post["caption"]))
            else:
                media.append(types.InputMediaPhoto(file_id))
        await bot.send_media_group(CHANNEL_ID, media)
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ")
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        try:
            await bot.send_message(post["user_id"], "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        except Exception:
            pass

    else:  # reject
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå")
        try:
            await bot.send_message(post["user_id"], "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception:
            pass

    # —É–¥–∞–ª—è–µ–º –∏–∑ pending
    pending_posts.pop(post_id, None)

# –ö–æ–º–∞–Ω–¥–∞ /cancel —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å FSM
@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
