import asyncio
import logging
import os
import re
import uuid
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputMediaPhoto,
                           KeyboardButton, Message, ReplyKeyboardMarkup)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
if API_TOKEN is None:
    raise ValueError("BOT_TOKEN not set in environment variables")

channel_id_str = os.getenv("CHANNEL_ID")
if channel_id_str is None:
    raise ValueError("CHANNEL_ID not set in environment variables")
try:
    CHANNEL_ID = int(channel_id_str)
except ValueError:
    raise ValueError("CHANNEL_ID must be an integer")

mod_chat_id_str = os.getenv("MOD_CHAT_ID")
if mod_chat_id_str is None:
    raise ValueError("MOD_CHAT_ID not set in environment variables")
try:
    MOD_CHAT_ID = int(mod_chat_id_str)
except ValueError:
    raise ValueError("MOD_CHAT_ID must be an integer")

admins_str = os.getenv("ADMINS", "")
ADMINS = []
if admins_str:
    try:
        ADMINS = [int(x) for x in admins_str.split(",") if x]
    except ValueError:
        raise ValueError("ADMINS must be comma-separated integers")

logging.basicConfig(level=logging.INFO)

# FSM
class SellForm(StatesGroup):
    photos = State()
    price = State()
    condition = State()
    description = State()
    size = State()
    contact = State()
    city = State()

# –ü–∞–º—è—Ç—å –¥–ª—è –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
pending_posts: Dict[str, dict] = {}

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ===== –ö–æ–º–∞–Ω–¥—ã =====
@dp.message(Command("id"))
async def cmd_id(message: Message):
    if message.from_user is None:
        logging.warning("Message without from_user")
        return
    await message.answer(f"chat_id: {message.chat.id}\nuser_id: {message.from_user.id}")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ")],
        ],
        resize_keyboard=True,
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç WM.\n"
        "–•–æ—á–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb,
    )

@dp.message(Command("info"))
async def cmd_info(message: Message):
    text = (
        "üìå –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n\n"
        "‚Ä¢ –§–æ—Ç–æ ‚Äî 1-5 —à—Ç.\n"
        "‚Ä¢ –¶–µ–Ω–∞ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–æ–≤–æ–µ / –±/—É\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ + —Ä–∞–∑–º–µ—Ä –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ\n"
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç ‚Äî @username –∏–ª–∏ t.me/username\n"
        "‚Ä¢ –ì–æ—Ä–æ–¥ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\n\n"
        "üî∏ –ú—ã –Ω–µ —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã/–º–∞–≥–∞–∑–∏–Ω—ã.\n"
        "üö® –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
    )
    await message.answer(text)

# ===== –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º—ã =====
@dp.message(F.text == "üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
@dp.message(Command("sell"))
async def cmd_sell(message: Message, state: FSMContext):
    await state.set_state(SellForm.photos)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (1-5). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ `–≥–æ—Ç–æ–≤–æ`.")

@dp.message(SellForm.photos, F.photo)
async def process_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos: List[str] = data.get("photos", [])
    if message.photo and len(message.photo) > 0:
        photos.append(message.photo[-1].file_id)
    else:
        await message.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return
    if len(photos) > 5:
        await message.answer("–ú–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ ‚ùó")
        return
    await state.update_data(photos=photos)
    await message.answer(f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã ({len(photos)}/5). –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ `–≥–æ—Ç–æ–≤–æ`.")

@dp.message(SellForm.photos, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def finish_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("photos"):
        await message.answer("–¢—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ /cancel.")
        return
    await state.set_state(SellForm.price)
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É.")

@dp.message(SellForm.price)
async def process_price(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ü–µ–Ω—É —Ç–µ–∫—Å—Ç–æ–º.")
        return
    price = re.sub(r"\s+", " ", message.text.strip())
    if not price:
        await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –£–∫–∞–∂–∏ —Ü–µ–Ω—É.")
        return
    await state.update_data(price=price)
    await state.set_state(SellForm.condition)
    await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤–æ–µ / –±/—É).")

@dp.message(SellForm.condition)
async def process_condition(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    condition = message.text.strip()
    if not condition:
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        return
    await state.update_data(condition=condition)
    await state.set_state(SellForm.description)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ.")

@dp.message(SellForm.description)
async def process_description(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    description = message.text.strip()
    if not description:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return
    await state.update_data(description=description)
    await state.set_state(SellForm.size)
    await message.answer("–†–∞–∑–º–µ—Ä (–∏–ª–∏ '–Ω–µ—Ç').")

@dp.message(SellForm.size)
async def process_size(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º.")
        return
    size = message.text.strip()
    await state.update_data(size=size)
    await state.set_state(SellForm.contact)
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç (@username –∏–ª–∏ t.me/username).")

def normalize_contact(raw: Optional[str]) -> str:
    if raw is None:
        return ""
    raw = raw.strip()
    if not raw:
        return ""
    m = re.search(r"(?:t\.me/|telegram\.me/)(@?[\w\d_]+)", raw, re.IGNORECASE)
    if m:
        username = m.group(1)
        if not username.startswith("@"):
            username = "@" + username
        return username
    if re.fullmatch(r"[\w\d_]+", raw, re.IGNORECASE):
        return "@" + raw
    if raw.startswith("@") and re.fullmatch(r"@[\w\d_]+", raw, re.IGNORECASE):
        return raw
    return ""

@dp.message(SellForm.contact)
async def process_contact(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return
    contact = normalize_contact(message.text)
    if not contact or not contact.startswith("@"):
        await message.answer(
            "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫–∞ t.me/username.\n"
            "–û—Ç–ø—Ä–∞–≤—å –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        )
        return
    await state.update_data(contact=contact)
    await state.set_state(SellForm.city)
    await message.answer("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ (–∏–ª–∏ '–Ω–µ—Ç').")

@dp.message(SellForm.city)
async def process_city(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.")
        return
    city = message.text.strip()
    await state.update_data(city=city)
    data = await state.get_data()

    desc_line = data.get("description", "")
    size = data.get("size", "")
    if size and size.lower() != "–Ω–µ—Ç":
        if "—Ä–∞–∑–º–µ—Ä" not in desc_line.lower():
            desc_line = f"{desc_line} —Ä–∞–∑–º–µ—Ä {size}".strip()

    caption = (
        f"–¶–µ–Ω–∞: {data.get('price', '')}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data.get('condition', '')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc_line}\n"
        f"–ö—É–ø–∏—Ç—å: {data.get('contact', '')}"
    )
    if city and city.lower() != "–Ω–µ—Ç":
        caption += f"\n–ì–æ—Ä–æ–¥: {city}"

    photos = data.get("photos", [])
    if not photos:
        await message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ. –û—Ç–º–µ–Ω–∞.")
        await state.clear()
        return

    # Define media list explicitly to avoid undefined variable errors
    media: List[InputMediaPhoto] = []
    for i, file_id in enumerate(photos):
        media.append(InputMediaPhoto(media=file_id, caption=caption if i == 0 else None))

    post_id = str(uuid.uuid4())
    pending_posts[post_id] = {
        "user_id": message.from_user.id if message.from_user else 0,
        "photos": photos,
        "caption": caption,
    }

    try:
        sent = await bot.send_media_group(chat_id=MOD_CHAT_ID, media=media) # type: ignore
        if not sent:
            raise ValueError("No messages sent")
        moderator_msg_id = sent[0].message_id

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{post_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{post_id}"),
                ]
            ]
        )

        await bot.send_message(MOD_CHAT_ID, f"‚ÑπÔ∏è –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (id: {post_id})", reply_markup=kb)
        await message.answer("‚úÖ –¢–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    except Exception as e:
        logging.error(f"Error sending to mod chat: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

@dp.callback_query(F.data.startswith(("approve:", "reject:")))
async def process_moderation(callback: CallbackQuery):
    if callback.from_user is None:
        await callback.answer("No user", show_alert=True)
        return
    if callback.from_user.id not in ADMINS:
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    if callback.data is None:
        await callback.answer("No data", show_alert=True)
        return

    try:
        action, post_id = callback.data.split(":", 1)
    except ValueError:
        await callback.answer("Invalid callback data", show_alert=True)
        return

    post = pending_posts.get(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Define media list explicitly to avoid undefined variable errors
    media: List[InputMediaPhoto] = []
    for i, file_id in enumerate(post["photos"]):
        media.append(InputMediaPhoto(media=file_id, caption=post["caption"] if i == 0 else None))

    if action == "approve":
        try:
            await bot.send_media_group(chat_id=CHANNEL_ID, media=media) # type: ignore
            await callback.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            try:
                await bot.send_message(post["user_id"], "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ ‚úÖ")
            except Exception as e:
                logging.error(f"Error notifying user: {e}")
        except Exception as e:
            logging.error(f"Error publishing: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
    else:
        await callback.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        try:
            await bot.send_message(post["user_id"], "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå")
        except Exception as e:
            logging.error(f"Error notifying user: {e}")

    pending_posts.pop(post_id, None)

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Polling error: {e}")

if __name__ == "__main__":
    asyncio.run(main())