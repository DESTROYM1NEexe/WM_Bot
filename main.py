import asyncio
import logging
import re
import uuid
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

import requests
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputMediaAudio,
                           InputMediaDocument, InputMediaPhoto,
                           InputMediaVideo, KeyboardButton, Message,
                           ReplyKeyboardMarkup)

# ---------------- CONFIG ----------------
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env + python-dotenv
API_TOKEN = "8477337530:AAHjoB6-Ve_bd-qDd-Uc-C4TXikkKMt3H7A"
CHANNEL_ID = -1002328964343  # –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
MODER_CHAT_ID = -1002726262070  # —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS: List[int] = [6383171904]  # —Å—é–¥–∞ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞(–µ–π)/–∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

# ---------------- logging ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ---------------- FSM ----------------
class PostForm(StatesGroup):
    photos = State()
    price = State()
    condition = State()
    description = State()
    contact = State()
    city = State()
    # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
    waiting_reason = State()

# ---------------- CallbackData ----------------
class ModerCallback(CallbackData, prefix="moder"):
    action: str
    post_id: str

# ---------------- bot / dp ----------------
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ---------------- data storages ----------------
# pending_posts: post_id -> data about post (author, photos, caption, mod_msg_id)
pending_posts: Dict[str, Dict[str, Any]] = {}
# awaiting_reasons: prompt_message_id -> {"post_id": str, "admin_id": int, "mod_msg_id": int}
awaiting_reasons: Dict[int, Dict[str, Any]] = {}

# lock file to avoid double-run locally
lock_file = Path("bot.lock")
if lock_file.exists():
    logging.warning("–§–∞–π–ª bot.lock –Ω–∞–π–¥–µ–Ω ‚Äî —É–¥–∞–ª—è—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é (–ª–æ–∫–∞–ª—å–Ω—ã–π dev —Ä–µ–∂–∏–º).")
    try:
        lock_file.unlink(missing_ok=True)
    except Exception:
        pass
lock_file.touch()

# ---------------- helpers ----------------
def now_str() -> str:
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def kb_main() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def kb_moder(post_id: str) -> InlineKeyboardMarkup:
    inline_keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=ModerCallback(action="approve", post_id=post_id).pack()),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=ModerCallback(action="reject", post_id=post_id).pack()),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def normalize_contact(raw: Optional[str]) -> str:
    if not raw:
        return ""
    raw = raw.strip()
    if raw.startswith("@"):
        return raw
    # –¥–æ–ø—É—Å—Ç–∏–º—ã t.me/username –∏ telegram.me/username
    m = re.search(r"(?:t\.me/|telegram\.me/)(@?[\w\d_]+)", raw, re.IGNORECASE)
    if m:
        u = m.group(1)
        return u if u.startswith("@") else "@" + u
    # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
    if re.fullmatch(r"[\w\d_]+", raw):
        return "@" + raw
    return raw

# ---------------- sanity check API token (optional) ----------------
def check_token() -> None:
    try:
        r = requests.get(f"https://api.telegram.org/bot{API_TOKEN}/getMe", timeout=10)
        if r.status_code != 200:
            logging.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (getMe): %s", r.text)
            # –Ω–µ –≤—ã—Ö–æ–¥–∏–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
        else:
            logging.info("Bot authorized OK")
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω: %s", e)

check_token()

# ---------------- Handlers (user flow) ----------------
@router.message(Command("start"))
async def cmd_start(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb_main())

@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def cmd_info(msg: Message):
    await msg.answer(
        "üìå –£–∫–∞–∂–∏—Ç–µ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:\n"
        "‚Ä¢–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî —á—ë—Ç–∫–∏–µ, —Å —Ö–æ—Ä–æ—à–∏–º —Å–≤–µ—Ç–æ–º\n"
        "‚Ä¢–¶–µ–Ω–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢–°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–æ–≤–æ–µ / –±/—É\n"
        "‚Ä¢–û–ø–∏—Å–∞–Ω–∏–µ ‚Äî –∫—Ä–∞—Ç–∫–æ (max 700 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "‚Ä¢–ö–æ–Ω—Ç–∞–∫—Ç ‚Äî —Ç–æ–ª—å–∫–æ @username (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –ì–æ—Ä–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n",
        reply_markup=kb_main()
    )

@router.message(F.text == "üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def cmd_sell(msg: Message, state: FSMContext):
    await state.set_state(PostForm.photos)
    await state.update_data(photos=[])
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (1‚Äì5). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–≥–æ—Ç–æ–≤–æ'.", reply_markup=kb_main())

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cmd_cancel_text(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_main())

@router.message(F.photo, PostForm.photos)
async def handler_photo(msg: Message, state: FSMContext):
    if not msg.photo:
        await msg.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    data = await state.get_data()
    photos = data.get("photos", [])
    if len(photos) >= 5:
        await msg.answer("–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        return
    photos.append(msg.photo[-1].file_id)
    await state.update_data(photos=photos)
    await msg.answer(f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(photos)}/5). –ï—â—ë –∏–ª–∏ '–≥–æ—Ç–æ–≤–æ'?", reply_markup=kb_main())

@router.message(PostForm.photos, F.text)
async def handle_text_in_photos(msg: Message, state: FSMContext):
    text = (msg.text or "").lower().strip()
    if text == "–≥–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        photos = data.get("photos", [])
        if not photos:
            await msg.answer("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.", reply_markup=kb_main())
            return
        await state.set_state(PostForm.price)
        await msg.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 990).", reply_markup=kb_main())
    else:
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.")

@router.message(PostForm.price)
async def handler_price(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 990 –∏–ª–∏ '–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è').")
        return
    await state.update_data(price=text)
    await state.set_state(PostForm.condition)
    await msg.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤–æ–µ / –±/—É).", reply_markup=kb_main())

@router.message(PostForm.condition)
async def handler_condition(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É).")
        return
    await state.update_data(condition=text)
    await state.set_state(PostForm.description)
    await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–æ, max 700 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=kb_main())

@router.message(PostForm.description)
async def handler_description(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return
    if len(text) > 700:
        await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (max 700 —Å–∏–º–≤–æ–ª–æ–≤). –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(description=text)
    await state.set_state(PostForm.contact)
    await msg.answer("–ö–æ–Ω—Ç–∞–∫—Ç ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ @username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @ivan).", reply_markup=kb_main())

@router.message(PostForm.contact)
async def handler_contact(msg: Message, state: FSMContext):
    raw = (msg.text or "").strip()
    contact = normalize_contact(raw)
    if not contact.startswith("@"):
        await msg.answer("–ö–æ–Ω—Ç–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (—Ç–æ–ª—å–∫–æ @username).")
        return
    if not re.match(r'^@[a-zA-Z\d_]{5,32}$', contact, re.IGNORECASE):
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç @username (5-32 —Å–∏–º–≤–æ–ª–∞: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(contact=contact)
    await state.set_state(PostForm.city)
    await msg.answer("–ì–æ—Ä–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å.", reply_markup=kb_main())

@router.message(PostForm.city)
async def handler_city(msg: Message, state: FSMContext):
    city_text = (msg.text or "").strip()
    if not city_text:
        city_text = "–Ω–µ—Ç"
    await state.update_data(city=city_text)

    data = await state.get_data()
    photos: List[str] = data.get("photos", [])
    if not photos:
        await msg.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb_main())
        await state.clear()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å (caption)
    caption_lines = [
        f"–¶–µ–Ω–∞: {data.get('price','')}",
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {data.get('condition','')}",
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description','')}",
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact','')}"
    ]
    if city_text.lower() != "–Ω–µ—Ç":
        caption_lines.append(f"üìç –ì–æ—Ä–æ–¥: {city_text}")
    caption = "\n".join(caption_lines)
    if len(caption) > 1024:
        await msg.answer("–û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(PostForm.description)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º media –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–µ—Ä–∞–ª—å–Ω—ã–π —á–∞—Ç
    media: List[Union[InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio]] = []
    for i, fid in enumerate(photos):
        media.append(InputMediaPhoto(media=fid, caption=caption if i == 0 else None))

    # —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –ø–æ—Å—Ç–∞
    post_id = str(uuid.uuid4())
    author = msg.from_user
    author_id = author.id if author else 0
    author_name = author.full_name if author else "unknown"
    author_username = ("@" + author.username) if (author and author.username) else "–Ω–µ—Ç"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º media_group –≤ –º–æ–¥.—á–∞—Ç
    try:
        sent = await bot.send_media_group(chat_id=MODER_CHAT_ID, media=media)
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å media_group –≤ –º–æ–¥.—á–∞—Ç: %s", e)
        await msg.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb_main())
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—á—Ç–æ–±—ã callback –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
    moder_text = (
        f"<b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (id: {post_id})</b>\n\n"
        f"{caption}\n\n"
        f"üë§ –û—Ç: <a href='tg://user?id={author_id}'>{author_name}</a>\n"
        f"üÜî ID: <code>{author_id}</code>\n"
        f"üîó Username: {author_username}\n"
        f"üïí –í—Ä–µ–º—è: {now_str()}"
    )
    try:
        mod_msg = await bot.send_message(chat_id=MODER_CHAT_ID, text=moder_text, reply_markup=kb_moder(post_id))
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: %s", e)
        await msg.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é (—Ç–µ–∫—Å—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb_main())
        await state.clear()
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ø–∞–º—è—Ç–∏: –ø–æ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    pending_posts[post_id] = {
        "author_id": author_id,
        "author_name": author_name,
        "author_username": author_username,
        "photos": photos,
        "caption": caption,
        "mod_message_id": mod_msg.message_id,
        "mod_chat_id": MODER_CHAT_ID,
        "time": now_str(),
    }

    await msg.answer("‚úÖ –¢–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", reply_markup=kb_main())
    await state.clear()

# ---------------- Moderation callbacks ----------------
@router.callback_query(ModerCallback.filter(F.action == "approve"))
async def on_approve(cb: CallbackQuery, callback_data: ModerCallback):
    admin = cb.from_user
    if admin is None or admin.id not in ADMINS:
        await cb.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    post_id = callback_data.post_id
    post = pending_posts.get(post_id)
    if not post:
        await cb.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return

    # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª
    photos = post.get("photos", [])
    caption = post.get("caption", "")
    media: List[Union[InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio]] = []
    for i, fid in enumerate(photos):
        media.append(InputMediaPhoto(media=fid, caption=caption if i == 0 else None))
    try:
        await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: %s", e)
        await cb.answer("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
        return

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
    try:
        await bot.send_message(chat_id=post["author_id"], text=f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (ID: {post_id}) –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    except Exception:
        logging.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

    # —Å–æ–æ–±—â–∞–µ–º –≤ –º–æ–¥.—á–∞—Ç / —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    text_to_edit = f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ @{(admin.username or '–Ω–µ—Ç')} (ID: {admin.id}) ‚Äî –ø–æ—Å—Ç id:{post_id}"
    try:
        await bot.edit_message_text(chat_id=MODER_CHAT_ID, message_id=post["mod_message_id"], text=text_to_edit)
    except Exception:
        # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id=MODER_CHAT_ID, text=text_to_edit)

    # –æ—Ç–ø—Ä–∞–≤–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º (ADMINS) –ª–æ–≥ –æ —Ç–æ–º –∫—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª
    for owner in ADMINS:
        try:
            if owner != admin.id:
                await bot.send_message(owner, f"üîµ –ü–æ—Å—Ç {post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{(admin.username or '–Ω–µ—Ç')} (id={admin.id}) –≤ {now_str()}")
        except Exception:
            logging.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É %s", owner)

    # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    pending_posts.pop(post_id, None)
    await cb.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")

@router.callback_query(ModerCallback.filter(F.action == "reject"))
async def on_reject(cb: CallbackQuery, callback_data: ModerCallback):
    admin = cb.from_user
    if admin is None or admin.id not in ADMINS:
        await cb.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    post_id = callback_data.post_id
    post = pending_posts.get(post_id)
    if not post:
        await cb.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return

    # –ü—Ä–æ—Å–∏–º –ø—Ä–∏—á–∏–Ω—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥—ë–º reply
    try:
        prompt = await bot.send_message(chat_id=MODER_CHAT_ID, text="‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, max 4000 —Å–∏–º–≤–æ–ª–æ–≤).")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ prompt: %s", e)
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—á–∏–Ω—ã", show_alert=True)
        return

    awaiting_reasons[prompt.message_id] = {"post_id": post_id, "admin_id": admin.id, "mod_message_id": post["mod_message_id"]}
    await cb.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥.—á–∞—Ç–µ")

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–µ–ø–ª–∞–∏—Ç—Å—è –Ω–∞ prompt) ----------------
@router.message(F.reply_to_message)
async def handle_reason_reply(msg: Message):
    reply_to = msg.reply_to_message
    if not reply_to:
        return
    info = awaiting_reasons.get(reply_to.message_id)
    if not info:
        return  # –Ω–µ –Ω–∞—à prompt
    admin = msg.from_user
    if not admin or admin.id != info["admin_id"]:
        await msg.reply("–ü—Ä–∏—á–∏–Ω—É –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Ç–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.")
        return
    reason = (msg.text or "").strip()
    if not reason:
        await msg.reply("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    if len(reason) > 4000:
        await msg.reply("–ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (max 4000 —Å–∏–º–≤–æ–ª–æ–≤). –£–∫–æ—Ä–æ—Ç–∏—Ç–µ.")
        return

    post_id = info["post_id"]
    post = pending_posts.get(post_id)
    if not post:
        await msg.reply("–ü–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        awaiting_reasons.pop(reply_to.message_id, None)
        return

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏—á–∏–Ω–∞ –∏ –∫—Ç–æ –æ—Ç–∫–∞–∑–∞–ª (id + username)
    moderator_info = f"{admin.full_name} (id={admin.id}, @{admin.username or '–Ω–µ—Ç'})"
    try:
        await bot.send_message(chat_id=post["author_id"], text=(
            f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (ID: {post_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: ¬´{reason}¬ª\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞."
        ))
    except Exception:
        logging.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–¥.—á–∞—Ç –æ —Ç–æ–º –∫—Ç–æ –∏ –ø–æ—á–µ–º—É –æ—Ç–∫–ª–æ–Ω–∏–ª
    try:
        await bot.send_message(chat_id=MODER_CHAT_ID, text=(
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: ¬´{reason}¬ª\n"
            f"–ü–æ—Å—Ç id: {post_id}"
        ))
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥.—á–∞—Ç –æ –ø—Ä–∏—á–∏–Ω–µ")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –ø—Ä–æ–µ–∫—Ç–∞ (ADMINS) —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    for owner in ADMINS:
        try:
            await bot.send_message(owner, (
                f"üî¥ –ü–æ—Å—Ç {post_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω –≤ {now_str()}.\n"
                f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator_info}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–ê–≤—Ç–æ—Ä id: {post['author_id']}, username: {post['author_username']}\n"
                f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (caption):\n{post['caption']}"
            ))
        except Exception:
            logging.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ %s", owner)

    # –ø–æ–º–µ—Ç–∏–º / –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—á—Ç–æ–±—ã –≤–∏–¥–Ω–æ –±—ã–ª–æ, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
    try:
        await bot.edit_message_text(chat_id=MODER_CHAT_ID, message_id=post["mod_message_id"],
                                    text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ {moderator_info} ‚Äî –ø—Ä–∏—á–∏–Ω–∞: {reason}\n–ü–æ—Å—Ç id:{post_id}")
    except Exception:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    # –æ—á–∏—Å—Ç–∫–∞
    pending_posts.pop(post_id, None)
    awaiting_reasons.pop(reply_to.message_id, None)

# ---------------- Fallback (–ø—Ä–æ—á–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ----------------
@router.message(F.text)
async def fallback_text(msg: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await msg.answer("–Ø –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è –¥–µ–π—Å—Ç–≤–∏–µ: –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ ‚ÑπÔ∏è –ò–Ω—Ñ–æ.", reply_markup=kb_main())
        return
    # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == PostForm.photos:
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.")
    elif current_state == PostForm.price:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 990 –∏–ª–∏ '–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è').")
    elif current_state == PostForm.condition:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤–æ–µ –∏–ª–∏ –±/—É).")
    elif current_state == PostForm.description:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–æ, max 700 —Å–∏–º–≤–æ–ª–æ–≤).")
    elif current_state == PostForm.contact:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ @username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @ivan).")
    elif current_state == PostForm.city:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ '–Ω–µ—Ç'.")
    else:
        await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=kb_main())

# ---------------- graceful shutdown ----------------
async def on_shutdown():
    try:
        if lock_file.exists():
            lock_file.unlink(missing_ok=True)
    except Exception:
        pass
    await bot.session.close()

# ---------------- run ----------------
async def main():
    logging.info("Bot starting")
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())